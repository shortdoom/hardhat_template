/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CounterInterface extends ethers.utils.Interface {
  functions: {
    "countDown()": FunctionFragment;
    "countUp()": FunctionFragment;
    "getCount()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "countDown", values?: undefined): string;
  encodeFunctionData(functionFragment: "countUp", values?: undefined): string;
  encodeFunctionData(functionFragment: "getCount", values?: undefined): string;

  decodeFunctionResult(functionFragment: "countDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "countUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCount", data: BytesLike): Result;

  events: {
    "CountedTo(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CountedTo"): EventFragment;
}

export class Counter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CounterInterface;

  functions: {
    countDown(overrides?: Overrides): Promise<ContractTransaction>;

    "countDown()"(overrides?: Overrides): Promise<ContractTransaction>;

    countUp(overrides?: Overrides): Promise<ContractTransaction>;

    "countUp()"(overrides?: Overrides): Promise<ContractTransaction>;

    getCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  countDown(overrides?: Overrides): Promise<ContractTransaction>;

  "countDown()"(overrides?: Overrides): Promise<ContractTransaction>;

  countUp(overrides?: Overrides): Promise<ContractTransaction>;

  "countUp()"(overrides?: Overrides): Promise<ContractTransaction>;

  getCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    countDown(overrides?: CallOverrides): Promise<BigNumber>;

    "countDown()"(overrides?: CallOverrides): Promise<BigNumber>;

    countUp(overrides?: CallOverrides): Promise<BigNumber>;

    "countUp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    CountedTo(number: null): EventFilter;
  };

  estimateGas: {
    countDown(overrides?: Overrides): Promise<BigNumber>;

    "countDown()"(overrides?: Overrides): Promise<BigNumber>;

    countUp(overrides?: Overrides): Promise<BigNumber>;

    "countUp()"(overrides?: Overrides): Promise<BigNumber>;

    getCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    countDown(overrides?: Overrides): Promise<PopulatedTransaction>;

    "countDown()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    countUp(overrides?: Overrides): Promise<PopulatedTransaction>;

    "countUp()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
